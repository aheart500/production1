{"version":3,"sources":["Components/Header.js","Components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","MemeGenerator","props","formchange","event","target","name","value","setState","changeImage","preventDefault","randNumber","Math","floor","random","state","allMemeImages","length","randImg","url","imgSrc","textPositionChange","id","prevState","left","topText","bottomText","fetch","then","response","json","memes","data","type","this","placeholder","onChange","onClick","src","alt","title","style","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mPAYeA,E,iLARP,OACI,yBAAKC,UAAU,UACX,sE,GAJKC,IAAMC,W,OC0EZC,E,YAzEX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAgBVC,WAAa,SAACC,GAAU,IAAD,EACEA,EAAMC,OAApBC,EADY,EACZA,KAAKC,EADO,EACPA,MACZ,EAAKC,SAAL,eAAiBF,EAAQC,KAnBX,EAqBlBE,YAAc,SAACL,GACXA,EAAMM,iBACN,IAAMC,EAAaC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,cAAcC,QACjEC,EAAU,EAAKH,MAAMC,cAAcL,GAAYQ,IACrD,EAAKX,SAAS,CAACY,OAASF,KAzBV,EA2BlBG,mBAAqB,SAACjB,GAClBA,EAAMM,iBACiB,eAApBN,EAAMC,OAAOiB,GACZ,EAAKd,SAAS,SAAAe,GACV,MAAM,CACNC,KAAOD,EAAUC,KAAM,MAI3B,EAAKhB,SAAS,SAAAe,GACV,MAAM,CAACC,KAAOD,EAAUC,KAAM,OAnCtC,EAAKT,MAAO,CACRU,QAAU,GACVC,WAAa,GACbN,OAAS,gCACTJ,cAAgB,GAChBQ,KAAO,KAPG,E,iFAUE,IAAD,OACfG,MAAM,qCAAqCC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAAQF,KAAK,SAAAC,GAAa,IACpFE,EAASF,EAASG,KAAlBD,MACP,EAAKvB,SAAS,CAACQ,cAAgBe,Q,+BA6BnC,OACI,yBAAKjC,UAAU,kBACX,0BAAMA,UAAU,aACZ,8CACA,2BACAmC,KAAK,OACL3B,KAAO,UACPC,MAAQ2B,KAAKnB,MAAMU,QACnBU,YAAa,WACbC,SAAYF,KAAK/B,aACjB,iDACA,2BACA8B,KAAK,OACL3B,KAAO,aACPC,MAAQ2B,KAAKnB,MAAMW,WACnBS,YAAa,cACbC,SAAYF,KAAK/B,aAAa,6BAC9B,4BAAQkC,QAASH,KAAKb,mBAAoBC,GAAG,cAA7C,QACA,4BAAQe,QAASH,KAAKb,mBAAoBC,GAAG,eAA7C,SACA,4BAAQe,QAASH,KAAKzB,aAAtB,cAEJ,yBAAKX,UAAU,YACX,yBAAKwC,IAAKJ,KAAKnB,MAAMK,OAAQmB,IAAI,GAAGC,MAAM,eAC1C,wBAAI1C,UAAU,wBAAwB2C,MAAO,CAACjB,KAAMU,KAAKnB,MAAMS,OAAQU,KAAKnB,MAAMU,SAClF,wBAAI3B,UAAU,2BAA2B2C,MAAO,CAACjB,KAAMU,KAAKnB,MAAMS,OAAQU,KAAKnB,MAAMW,kB,GAnE7E3B,IAAMC,WCcnB0C,G,uLAHX,OALE,yBAAK5C,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUC,IAAMC,YCOJ2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC,gB","file":"static/js/main.d5c6ff56.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return (\r\n            <div className='header'>\r\n                <h1>Hi This is a Meme Generator App !</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nclass MemeGenerator extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            topText : '',\r\n            bottomText  :'',\r\n            imgSrc : 'http://i.imgflip.com/1bij.jpg',\r\n            allMemeImages : [],\r\n            left : 150,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://api.imgflip.com/get_memes').then(response => response.json()).then(response => {\r\n            const {memes} = response.data \r\n            this.setState({allMemeImages : memes })\r\n\r\n        })\r\n    }\r\n    formchange = (event) =>{\r\n        const {name,value} = event.target\r\n        this.setState({ [name] : value})\r\n    }\r\n    changeImage = (event) =>{\r\n        event.preventDefault();\r\n        const randNumber = Math.floor(Math.random() * this.state.allMemeImages.length);\r\n        const randImg = this.state.allMemeImages[randNumber].url\r\n        this.setState({imgSrc : randImg })\r\n    }\r\n    textPositionChange = (event) =>{\r\n        event.preventDefault();\r\n        if(event.target.id === 'leftButton'){\r\n            this.setState(prevState => {\r\n                return{\r\n                left : prevState.left -10\r\n                }\r\n            })\r\n        }else{\r\n            this.setState(prevState => {\r\n                return{left : prevState.left +10}\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <div className='meme-generator'>\r\n                <form className='meme-form'>\r\n                    <label>Top Text : </label>\r\n                    <input \r\n                    type='text'\r\n                    name = 'topText'\r\n                    value ={this.state.topText}\r\n                    placeholder ='Top Text'\r\n                    onChange = {this.formchange}/>\r\n                    <label>Bottom Text : </label>\r\n                    <input \r\n                    type='text'\r\n                    name = 'bottomText'\r\n                    value ={this.state.bottomText}\r\n                    placeholder ='Bottom Text'\r\n                    onChange = {this.formchange}/><br />\r\n                    <button onClick={this.textPositionChange} id='leftButton'>Left</button>\r\n                    <button onClick={this.textPositionChange} id='rightButton'>Right</button>\r\n                    <button onClick={this.changeImage}>Generate!</button>\r\n                </form>\r\n                <div className='meme-img'>\r\n                    <img src={this.state.imgSrc} alt='' title=\"Meme Image\"/>\r\n                    <h2 className='img-top-text img-text' style={{left: this.state.left}}>{this.state.topText}</h2>\r\n                    <h2 className='img-bottom-text img-text' style={{left: this.state.left}}>{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemeGenerator;","import React from 'react';\nimport Header from './Components/Header'\nimport MemeGenerator from './Components/MemeGenerator'\nimport './App.css';\n\nclass App extends React.Component{\n  render(){\n    const JSX = (\n      <div className='app-class'>\n        <Header />\n        <MemeGenerator />\n      </div>\n    );\n    return JSX\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}